/// <reference path="../../../../solutions/TypeDefinitions/mscrm.d.ts" />
/// <reference path="../../../external/TypeDefinitions/jquery.d.ts" />
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ErrorHandling {
    /**
     * List of error codes used in custom controls.
     */
    class ErrorCode {
        static ValueOutOfRangeId: string;
        static InvalidInputMaskId: string;
        static MaxLengthExceededId: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ErrorHandling {
    /**
     * Handles the notification of custom control errors to the user
     * @remark the notifications come from XRM and are documented here:
     * https://msdn.microsoft.com/en-us/library/gg334266(v=crm.6).aspx#BKMK_notification
     */
    class NotificationHandler {
        private setNotification;
        private clearNotification;
        /**
         * Builds the notification handler
         * @param setNotification: delegate for setting the notification
         * @param clearNotification: delegate for clearing the notification
         */
        constructor(setNotification: (message: string, id: string) => boolean, clearNotification: (id: string) => boolean);
        /**
         * Displays the notification
         * @param notification message
         * @param notification id
        */
        notify(message: string, id: string): void;
        /**
         * Clears the notification
         * @param notification id
         */
        clear(id: string): void;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ErrorHandling {
    /**
     * Handles code exceptions
     */
    class ExceptionHandler {
        /**
         * Displays the exception message
         * @param error message
         */
        static throwException(message: string): void;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
    * Rendering mode for a progress indicator.
    */
    enum ProgressIndicatorType {
        /**
        * Horizontal "marching-dots".
        */
        Bar = 0,
        /**
        * Circular ring of dots.
        */
        Ring = 1,
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module Mscrm {
    /**
     * Source type of a field.
     */
    enum AttributeSourceType {
        Unknown = -1,
        Persistent = 0,
        Calculated = 1,
        Rollup = 2,
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module Mscrm {
    enum UpdateEventType {
        DataSet = 0,
        Layout = 1,
        Activation = 2,
    }
    /**
     * Allows a control to guard itself against (multiple) different update events coming from the infra.
     * The default configuration is:
     *   - DataSet: Not ignored
     *   - Layout: Not ignored
     *   - Activation: Ignored
     */
    class UpdateEvents {
        private ignoredEvents;
        constructor();
        /**
         * Returns the Mscrm.UpdateEventType enum that is mapped to a given event type code
         * generated by the infra. Returns null if not the code is not found.
         */
        static getEventType(event: string): Mscrm.UpdateEventType;
        /**
         * Returns the Mscrm.UpdateEventType enum that is mapped to a given event type code
         * generated by the infra. Returns null if not the code is not found.
         */
        static getEventCode(event: Mscrm.UpdateEventType): string;
        /**
         * The event provided in the parameters will be marked as ignorable if and only if
         * shouldIgnore is set to true.
         *
         * @param event {Mscrm.UpdateEventType}: The event to be configured
         * @param shouldIgnore {boolean}: true if the event can be ignored; false otherwise.
         */
        shouldIgnoreEvent(event: Mscrm.UpdateEventType, shouldIgnore: boolean): void;
        /**
         * Returns true if and only if the event provided may be ignored.
         *
         * @param event {Mscrm.UpdateEventType}: The event to be checked.
         */
        isIgnoredEvent(event: Mscrm.UpdateEventType): boolean;
        /**
         * Returns true if and only if the updatedProperties array contains the event provided.
         *
         * @param updatedProperties {string[]}: The updated properties array provided by the infra.
         * @param event {Mscrm.UpdateEventType}: The event to be located in the updatedProperties array.
         */
        static hasEvent(updatedProperties: string[], event: Mscrm.UpdateEventType): boolean;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class AttributeConstants {
        /** input node checked attribute */
        static Checked: string;
        /** input node readonly attribute**/
        static ReadOnly: string;
        /** control disabled attribute */
        static Disabled: string;
        /** control style attribute */
        static Style: string;
        /** control framework layout update attribute */
        static Layout: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmControls.Common {
    enum ControlState {
        Disabled = 0,
        Enabled = 1,
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class CommonControl<TParams, TOutput> implements Mscrm.StandardControl<TParams, TOutput> {
        static ClassName: string;
        static ClassRtl: string;
        static PointerDownEventName: string;
        static PointerMoveEventName: string;
        static PointerUpEventName: string;
        static TouchEndEventName: string;
        static DefaultValueLabel: string;
        static NullOrUndefinedInitContainer: string;
        static NullOrUndefinedInitValueContainer: string;
        static NullOrUndefinedInitNotifyOutputChangedDelegate: string;
        static UninitializedErrorMessage: string;
        static UninitializedDataBagMessage: string;
        static InvalidDataBagKeyFormat: string;
        static UninitializedControl: string;
        static InvalidInputParamMinMax: string;
        static InvalidInputParamStep: string;
        static InvalidInputParamValue: string;
        static NotGreaterThanZeroInputParamValue: string;
        static InvalidInputParam: string;
        static MethodNotOverridenFormat: string;
        static MethodNotImplementedInControl: string;
        private static accessibilityOutlineClassName;
        private lastKeyPress;
        notificationHandler: MscrmCommon.ErrorHandling.NotificationHandler;
        protected container: HTMLDivElement;
        protected controlWrapperContainer: HTMLDivElement;
        protected eventGuard: MscrmCommon.EventGuard;
        protected shouldNotifyOutputChanged: boolean;
        protected notifyOutputChanged: () => void;
        protected shouldPreventMultipleEventTypes: boolean;
        protected preventEditModePanoramaEvents: boolean;
        protected htmlEncode: (rawString: string) => string;
        protected updateEvents: Mscrm.UpdateEvents;
        private isInitialized;
        private isEnabled;
        private isInReadMode;
        private disablePanoramaScroll;
        /**
         * Empty constructor.
         */
        constructor();
        /**
         * Gets a value indicating if the control was initialized.
         */
        isControlInitialized: boolean;
        /**
         * Initializes the control. This function will receive the HTML Div element that will contain your custom control
         * as well as a function to notify the infrastructure that your outputs have changed and that it should call getOutputs()
         * @param context The "Input Bag" containing the parameters and other control metadata.
         * @param notifyOutputChanged A Callback to notify the infrastructure to read the outputs
         * @param state The control state.
         * @param container The HTML Element that will contain the control
         */
        init(context: Mscrm.ControlData<TParams>, notifyOutputChanged: () => void, state: Mscrm.Dictionary, container: HTMLDivElement): void;
        /**
         * Updates the control with data from the a bag of values currently assigned to the control's manifest parameters
         * @param context The bag of values described above
         */
        updateView(context: Mscrm.ControlData<TParams>): void;
        /**
         * @returns The a bag of output values to pass to the infrastructure
         */
        getOutputs(): TOutput;
        /**
         * Event handler called when the user triggers a navigation event.
         */
        onPreNavigation(): void;
        /**
         * This function destroys the control and cleans up
         */
        destroy(): void;
        /**
         * Create a wrapper container for the control.
         * @remark this contains the common controls class name
         * @param additional, more specific class name
         */
        createWrapperContainer(className?: string, isRtl?: boolean): HTMLDivElement;
        /**
         * Handles control specific initialization.
         * Method should be overridden in the controls specialized classes.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         */
        protected initCore(context: Mscrm.ControlData<TParams>, state?: Mscrm.Dictionary): void;
        /**
         * Handles control specific update.
         * Method should be overridden in the controls specialized classes.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         */
        protected updateCore(context: Mscrm.ControlData<TParams>): void;
        /**
         * Handles control specific destruction.
         */
        protected destroyCore(): void;
        /**
         * Handles read mode rendering.
         * Method should be overridden in the controls specialized classes.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         */
        protected renderReadMode(context: Mscrm.ControlData<TParams>): void;
        /**
         * Handles edit mode rendering.
         * Method should be overridden in the controls specialized classes.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         */
        protected renderEditMode(context: Mscrm.ControlData<TParams>): void;
        /**
         * Method should be overridden in the controls specialized classes.
         */
        protected getOutputsCore(): TOutput;
        /**
         * Notifies output changed only if the control is enabled or in read/preview mode.
         */
        protected notifyEnabledControlOutputChanged(): void;
        /**
         * Checks whether the control is enabled for changed output notifications.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         */
        protected isControlEnabled(context: Mscrm.ControlData<TParams>): boolean;
        /**
         * Checks if the control's bound property is null.
         * Method should be overridden in the controls specialized classes.
         * @params context The "Input Bag" containing the parameters and other control metadata.
         * @returns true if the bound property is null, false otherwise.
         */
        protected showDefaultLabelCore(context: Mscrm.ControlData<TParams>): boolean;
        /**
        * Toggles the container visibility depending on the param
        * @param value - truth value for showing/hiding the container
        * @remark if the control wrapper container exists, it will show/hide that one, else it will show/hide the parent container
        */
        private toggleContainerVisibility(value);
        /**
        * Handles the internal implementation of the control initialization.
        * @params context The "Input Bag" containing the parameters and other control metadata.
        * @param state The control state.
        */
        private initializeControl(context, state?);
        /**
        * Guards against infra updates due to layout changes.
        * @param context The bag of values described above
        * @returns truth value based on infra properties and the control's decision to ignore the update
        */
        private shouldIgnoreUpdate(context);
        /**
         * Checks the validity of the property bag and throws if it is invalid.
         * @param context The data bag.
         */
        private throwIfPropertyBagNotValid(context);
        /**
         * Helper method to clean up container
         */
        private cleanup();
        /**
         * Handles the transition from edit to read mode.
         * @param context The context.
         */
        private handleEditToReadModeTransition(context);
        /**
         * Removes the panorama events handlers, which disable panorama scroll.
         */
        private removePanoramaEventsHandlers();
        /**
         * Adds the panorama events handlers, which disable panorama scroll.
         */
        private addPanoramaEventsHandlers();
        /**
         * This method binds focus outlining when tabbing in a control.
         * @param focusElement The jQuery element initiating focus events.
         * @param container The jQuery element that the outline class will be added.
         */
        protected bindFocusVisibility(focusElement: JQuery, container: JQuery): void;
        /**
         * This method unbinds focus outlining when tabbing in a control.
         * @param container The jQuery element that the focuing events are binded.
         */
        protected unbindFocusVisibility(focusElement: JQuery, container: JQuery): void;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
    * Base class for field controls
    */
    class FieldControlBase<TParams, TOutput> extends CommonControl<TParams, TOutput> {
        constructor();
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class EventConstants {
        /** JQuery change event */
        static Change: string;
        /** JQuery click event */
        static Click: string;
        /** JQuery knob configure event */
        static JQueryKnobConfigure: string;
        /** JQuery swipe left event */
        static JQuerySwipeLeft: string;
        /** JQuery right left event */
        static JQuerySwipeRight: string;
        /** Key raise event */
        static KeyUp: string;
        /** Key down event */
        static KeyDown: string;
        /** JQuery mouseup event */
        static MouseUp: string;
        /** JQuery mousedown event */
        static MouseDown: string;
        /** Mouse Over event */
        static MouseOver: string;
        /** Mouse Move event */
        static MouseMove: string;
        /** Mouse Out event */
        static MouseOut: string;
        /** Pointer Down event */
        static PointerDown: string;
        /** Pointer Move event */
        static PointerMove: string;
        /** Pointer Up event */
        static PointerUp: string;
        /** Pointer Out event */
        static PointerOut: string;
        /** MS Pointer Over event */
        static MSPointerOver: string;
        /** MS Pointer Down event */
        static MSPointerDown: string;
        /** MS Pointer Out event */
        static MSPointerOut: string;
        /** MS Pointer Up event */
        static MSPointerUp: string;
        /** MS Pointer Move event */
        static MSPointerMove: string;
        /** Touch Start event */
        static TouchStart: string;
        /** Touch Move event */
        static TouchMove: string;
        /** Touch End event */
        static TouchEnd: string;
        /** Wijmo control library value changed event */
        static WijmoValueChangedEvent: string;
        /** Wijmo control library is dropped down changed event */
        static WijmoIsDroppedDownChangedEvent: string;
        /** Wijmo control library selected index changed event */
        static WijmoSelectedIndexChangedEvent: string;
        /** JQuery Mobile Virtual Mouse Move event **/
        static VMouseMove: string;
        /** Focus event */
        static Focus: string;
        /** Focus in event */
        static FocusIn: string;
        /** Focus out event */
        static FocusOut: string;
        /** Focus events */
        static FocusEvents: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class EventGuard {
        private static focusRemoveEvent;
        private static hasUserInteractedEventName;
        private static hasUserInteractedWithElementEventName;
        private shouldPreventMouseEvents;
        private shouldPreventTouchEvents;
        private userInteractedInEditModeWithAnInputElement;
        private userInteractedInEditMode;
        private removeClickEventHandler;
        private removeMultipleEventHandlers;
        private container;
        private userAgent;
        constructor(container: HTMLElement, userAgent: Mscrm.UserAgent);
        /**
         * Destroys the event guard.
         */
        destroy(): void;
        preventClicksUntilUserInteracted(): void;
        stopPreventingClicks(): void;
        /**
         * Prevent the next edit mode focus event, since it will occur during the transition.
         * @remarks We need to prevent input element actions when transitioning from read mode since the infra calls updateCore on pointerUp, and the focus event might follow.
         *			The extraneous focus event can cause unwanted behavior upon our control, so we set the input elements to read-only until we are sure that the user is interacting,
         *			which will happen on the next pointerdown.
         *			This behavior should be removed when entering read mode by calling the stopPreventingFocus function.
         */
        preventEditModeTransitionFocus(): void;
        /**
         * Stops preventing the transition edit mode focus event, as the control might not have been interacted with.
         * @param container The container on which to prevent the focus event.
         */
        stopPreventingFocus(): void;
        preventMultipleEventTypes(): void;
        /**
         * Stops preventing multiple event types.
         * Should be used when destroying the control.
         */
        stopPreventingMultipleEventTypes(): void;
        /**
         * Stops preventing focus events on a certain element.
         * @param element The element to stop focus events upon.
         */
        private stopPreventingFocusEvents(element);
        private static handleEditModeClickEvents(element, eventGuard);
        private static preventTouchEventsAfterMouseDown(element, eventGuard);
        private static preventMouseEventsAfterTouchStart(element, eventGuard);
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class MethodConstants {
        /** JQuery Mobile destroy method */
        static Destroy: string;
        /** JQuery Mobile refresh method */
        static Refresh: string;
        /** JQuery value method */
        static Value: string;
        /** JQuery option method */
        static Option: string;
        /** JQuery disable method */
        static Disable: string;
        /** JQuery enable method */
        static Enable: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Control guid generator helper methods.
    */
    class ControlGuidGenerator {
        static newGuid(controlName: string): string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Enum helper methods.
    */
    class Enum {
        static getFromString(enumArray: Array<string>, stringValue: string): number;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Event helper methods.
    */
    class Event {
        /**
         * Creates a namespaced event, in order to uniquely identify it.
         * @param eventName The name of an event, e.g. click.
         * @param eventNamespace The namespace of the event, used to uniquely identify the event.
         * @returns The event with the namespace.
         */
        static createName(eventName: string, eventNamespace: string): string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Hit target helper methods.
    */
    class HitTarget {
        private static initialEvents;
        private static subsequentEvents;
        private static mouseUpHitTargetEventName;
        /**
         * Checks if the hit target is already created
         * @param container - the container received from the control framework
         * @param hitTargetClassSelector - CSS selector for the hit target class
         * @returns truth value
         */
        static exists(container: JQuery, hitTargetClassSelector: string): boolean;
        /**
         * Creates a hit target around the control
         * @param container - the container received from the control framework
         * @param controlDomElement - the control's host element
         * @param hitTargetClass - the class containing control specific styles
         * @param trackElementClassSelector - the CSS selector that identifies the track element, e.g., actual slider bar
         * @param min - the mimimum value supported by the control
         * @param max - the maximum value supported by the control
         * @param paddingLeftPx - the offset from the container's left border
         * @param setControlValue - delegate that sets the control's value
         */
        static create(container: JQuery, controlDomElement: JQuery, hitTargetClass: string, trackElementClassSelector: string, paddingLeftPx: number, min: number, max: number, setControlValue: (value: number) => any): void;
        private static removeHitTargetSubsequentEvents(hitTargetElement);
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Helper methods for numeric interval controls.
    */
    class NumericInterval {
        static StepDefaultValue: number;
        /**
         * Checks the parameters in the property bag for null values.
         * @param context object passed by the infra
         * @param hasStep boolean flag
         */
        static throwIfNullDataBagParameters(context: {
            parameters: {
                value: Mscrm.NumberProperty;
                step?: Mscrm.NumberProperty;
                min: Mscrm.NumberProperty;
                max: Mscrm.NumberProperty;
            };
        }, hasStep?: boolean): void;
        /**
         * Process the property bag values (set default values, gracefully handle customization error scenarios).
         * @param context object passed by the infra
         * @param notificationHandler object
         * @param hasStep boolean flag
         * @param roundValues boolean flag
         */
        static processPropertyBagValues(context: {
            parameters: {
                value: Mscrm.NumberProperty;
                step?: Mscrm.NumberProperty;
                min: Mscrm.NumberProperty;
                max: Mscrm.NumberProperty;
            };
            resources: {
                getString(id: string): string;
            };
        }, notificationHandler: ErrorHandling.NotificationHandler, roundValues?: boolean): void;
        /**
         * Return a optional number propery
         * @param value the raw value
         * @returns a number property.
         */
        static createOptionalNumberPropery(value: number): Mscrm.NumberProperty;
        /**
         * Move the value to its correct step.
         * @param value the raw value
         * @param context the databag
         * @returns the new value
         */
        static moveValueToMultipleOfStep(value: number, context: Mscrm.ControlData<any>): number;
        /**
         * Gets the formatted value of the numeric control
         * @param value the NumberProperty object from the context
         * @returns the formatted value as a string
         */
        static getFormattedValue(value: Mscrm.NumberProperty): string;
        /**
        * Checks whether the formatted value is a percentage
        * @param formattedValue string
        * @remarks Wijmo does not accept a custom percentage symbol so we need to adhere to the default % symbol.
        */
        static isPercent(formattedValue: string): boolean;
        /**
        * Handles the behavior of the value container for numeric controls.
        * @param container for holding the value
        * @param control value as string
        */
        static setValueContainer(container: HTMLDivElement, value: string): void;
        /**
        * Gets the precision property
        * @remarks The precision is only present for decimals and currencies. Thus, we weakly type the attributes to reach this value.
        * @param property of type Mscrm.NumberProperty (weakly typed)
        * @returns precision attribute as a number
        */
        static getPrecision(property: any): number;
        /**
        * Checks if the supplied parameter si a number
        * @param value the value that needs to checked
        * @returns true if the parameter is a number, false otherwise
        */
        static isNumber(value: number): boolean;
        /**
        * Returns the integral part of a number by removing any fractional digits
        * @param x a number
        */
        static trunc(x: number): number;
        /**
        * Checks to see if the value is a finite number.
        * @returns true if the parameter is a valid number, false otherwise
        */
        static isNumeric(value: number): boolean;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Helper methods for numeric interval controls.
    */
    class WijmoGlobalization {
        private static formatting;
        private static wijmoFormatNumber;
        /**
        * Replaces wijmo.Globalize.formatNumber with our implementation (except for percentage format)
        * Required for negative number pattern and non-standard digit grouping support in Wijmo
        * @param crmFormatting - value from ControlData<TParams>.formatting containing CRM formatting functions
        */
        static setCrmNumberFormatting(crmFormatting: any): void;
        /**
        * Formats number using CRM's formatting functions for N and C formats and call default Wijmo formatting for other formats (P)
        * Required for negative number pattern support because Wijmo supports negative patterns for C and P only
        * Required for non-standard digit grouping because Wijmo does not support it
        * @param value - number to format
        * @param format - CLR format string like N2, C2, P2
        * @param trim - trim
        * @returns formatted string
        */
        private static formatNumber(value, format, trim);
        /**
        * Gets the Wijmo value format
        * @param context - the data bag object passed by the infra
        * @returns the value format to set in wijmo controls
        */
        static getFormat(context: Mscrm.ControlData<any>): string;
        /**
        * Gets the Wijmo formatted value
        * @param value - control value
        * @param format - wijmo number format
        * @returns formatted value as a string
        */
        static getFormattedValue(value: number, format: string): string;
        /**
        * Sets the wijmo number format structure
        * @param crmNumberFormat NumberFormatting structure passed from infra
        * @param numberType type of the bound field
        * @param isPercent flag indicating if the formatted value is a percentage
        * @param overriddenPrecision precision value if available for the field type
        */
        static setWijmoNumberFormatStructure(crmNumberFormat: Mscrm.NumberFormattingInfo, numberType: string, isPercent: boolean, overriddenPrecision: number): void;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Object helper methods.
    */
    class Object {
        static isNullOrUndefined(object: any): boolean;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * Object helper methods.
    */
    class Property {
        /**
         * Checks if the bound property is null.
         * @param property The control specific bound property
         * @returns true if the bound property is null, false otherwise.
         */
        static isNullOrEmpty(property: Mscrm.BaseProperty): boolean;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.ControlUtils {
    /**
    * String helper methods.
    */
    class String {
        static Empty: string;
        static isNullOrEmpty(s: string): boolean;
        static isNullOrWhitespace(s: string): boolean;
        static isNullUndefinedOrWhitespace(s: string): boolean;
        /**
        * @remarks Limited functionality implemented
        * @returns a formatted string, similar to string.Format in C#.
        */
        static Format(format: string, ...args: any[]): string;
        /**
         * Compares one string to another string. The result is true if and only if one of the following conditions is true:
         *   <ul>
         *     <li>Both arguments are null</li>
         *     <li>Both arguments are undefined</li>
         *     <li>
         *       Both arguments share the same sequence of characters when ignoring case. Two characters are considered the same if both
         *       are strictly equal after applying the String.prototype.toUpperCase() function.
         *     </li>
         *   </ul>
         * @param string1 The first string to compare
         * @param string2 The second string to compare
         * @returns true if the Strings are equal, ignoring case; false otherwise
         */
        static EqualsIgnoreCase(string1: string, string2: string): boolean;
        /**
         * Replaces [\r\n, \r, \n] or their respective HTML encoded versions [&#13;&#10;, &#13;, &#10;] with <br /> tags.
         *
         * @param text - The text to have the characters replaced.
         * @returns The text provided after performing the substitutions mentioned.
         */
        static ReplaceLineBreaksWithBrTags(text: string): string;
    }
}
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
declare module MscrmCommon {
    class ThemingHelper {
        static InvalidContainerMessage: string;
        static InvalidCssMessage: string;
        static InvalidCssValueMessage: string;
        static ReadModeClassName: string;
        static EditModeClassName: string;
        static injectStyle(container: HTMLDivElement, css: string): void;
        static removeStyles(container: HTMLDivElement): void;
        static getProcessNonSelectedColor(theming: Mscrm.Theme): string;
        static getGlobalLinkColor(theming: Mscrm.Theme): string;
        static getHoverLinkColor(theming: Mscrm.Theme): string;
        static getProcessControlColor(theming: Mscrm.Theme): string;
        static getShadeControlColor(theming: Mscrm.Theme): string;
        static getFontFamily(theming: Mscrm.Theme): string;
        static getFontColor(theming: Mscrm.Theme): string;
        static getFontSize(theming: Mscrm.Theme): string;
        static validateCssColor(value: string): string;
        static validateCssFontFamily(value: string): string;
        static validateCssSize(value: string): string;
        /**
         * Returns styles for input element in edit mode
         * @params the context which contains theming
         * @returns style - collected styles for input
         */
        static getEditModeStyle(theming: Mscrm.Theme, error: boolean): {
            [key: string]: any;
        };
        /**
         * Returns styles for input element in read mode
         * @params the context which contains theming
         * @returns style - collected styles for input
         */
        static getReadModeStyle(theming: Mscrm.Theme, error: boolean): {
            [key: string]: any;
        };
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
     * The full screen helper uses the HTML5 Fullscreen API to enable full screen rendering of HTML elements
     */
    class FullscreenHelper {
        /**
         * Checks if a browser supports the HTML5 Fullscreen API.
         */
        static supportsFullscreenApi: boolean;
        /**
         * Gets the current full screen element using the HTML5 Fullscreen API.
         */
        static fullscreenElement: any;
        /**
         * Requests an element to go full screen using the HTML5 Fullscreen API.
         * @param fullscreenTarget The element which to display full screen.
         */
        static requestFullscreen(fullscreenTarget: any): void;
        /**
         * Requests an element to go full screen using styling.
         * @param fullscreenTarget The element which to display full screen.
         */
        static requestFullscreenUsingStyling(fullscreenTarget: HTMLElement): void;
        /**
         * Removes the element currently occupying the full screen from the full screen using the HTML5 Fullscreen API.
         */
        static exitFullscreen(): void;
        /**
         * Removes an element from occupying the full screen using styling.
         * @param fullscreenTarget The element which to remove from the full screen.
         */
        static exitFullscreenUsingStyling(fullscreenTarget: HTMLElement): void;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
     * Current sort status of a data set column
     */
    class DataSetColumnSortStatus implements Mscrm.DataSetColumnSortStatus {
        /**
         * The name of the column
         */
        name: string;
        /**
         * The current sort direction for the column.
         */
        sortDirection: Mscrm.ColumnSortDirection;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
    * An expression used to represent a filter condition.
    */
    class ConditionExpression implements Mscrm.ConditionExpression {
        /**
        * The name of the data-set column to apply the filter on.
        */
        attributeName: string;
        /**
        * The operator used to evaluate the condition.
        */
        conditionOperator: Mscrm.ConditionOperator;
        /**
        * The raw value used to evaluate the condition.
        */
        value: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
    * An expression used to represent a filter.
    */
    class FilterExpression implements Mscrm.FilterExpression {
        /**
        * The set of conditions associated with this filter.
        */
        conditions: ConditionExpression[];
        /**
        * The operator used to combine conditions in this filter.
        */
        filterOperator: Mscrm.FilterOperator;
        /**
        * Any child filters that should be evaluated after evaluating this filter.
        */
        filters: FilterExpression[];
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class PrimitiveValue<T> implements Mscrm.DataTypes.PrimitiveValue<T> {
        /**
        * The raw value
        */
        value: T;
        /**
        * Name of the data type for this value
        */
        dataType: string;
        constructor(value: T, dataType: string);
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.Globalization {
    /**
    * Exposes type names used by the CRM infrastructure.
    */
    class CrmNumberType {
        static CrmDecimalTypeName: string;
        static CrmDoubleTypeName: string;
        static CrmIntegerTypeName: string;
        static CrmMoneyTypeName: string;
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.Globalization {
    /**
    * Number format pattern factory class. This class performs the mappings from .NET-compatible values to string number patterns.
    */
    class NumberPatternFactory {
        static NoSuchPatternError: string;
        private currencyPositivePatternArray;
        private currencyNegativePatternArray;
        private percentPositivePatternArray;
        private percentNegativePatternArray;
        /**
         * Returns the number format pattern having the specified value for currency positive numbers.
         * More info here: https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencypositivepattern(v=vs.110).aspx
         * @param patternValue The value of the number formatting pattern. See the documentation above for more info.
         */
        getCurrencyPositivePattern(patternValue: number): string;
        /**
         * Returns the number format pattern having the specified value for currency negative numbers.
         * More info here: https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencynegativepattern(v=vs.110).aspx
         * @param patternValue The value of the number formatting pattern. See the documentation above for more info.
         */
        getCurrencyNegativePattern(patternValue: number): string;
        /**
         * Returns the number format pattern having the specified value for currency positive numbers.
         * More info here: https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.percentpositivepattern(v=vs.110).aspx
         * @param patternValue The value of the number formatting pattern. See the documentation above for more info.
         */
        getPercentPositivePattern(patternValue: number): string;
        /**
         * Returns the number format pattern having the specified value for currency positive numbers.
         * More info here: https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.percentnegativepattern(v=vs.110).aspx
         * @param patternValue The value of the number formatting pattern. See the documentation above for more info.
         */
        getPercentNegativePattern(patternValue: number): string;
        private getPattern(patternArray, patternValue);
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon.Globalization {
    /**
    * Wijmo-specific number format factory class. This class takes its data from .NET-compatible values and maps them to constructs recognized by the wijmo library.
    */
    class WijmoNumberFormatFactory {
        static InvalidSymbolErrorMessage: string;
        /**
         * This function returns a number format construct recognized by the wijmo control toolkit framework.
         * @params numberFormatInfo The number format info received from the CRM infrastructure.
         * @params crmNumberType The CRM number type for which the formatting info should be prepared.
         * @params isPercent A flag indicating whether the number is a percent.
         * @params overriddenPrecision Optional parameter that overrides the precision in the number formatting info structure.
         */
        static getWijmoNumberFormatStructure(numberFormatInfo: Mscrm.NumberFormattingInfo, crmNumberType: string, isPercent: boolean, overriddenPrecision?: number): any;
        /**
         * This function returns a .NET compatible format string for the wijmo controls.
         * @params numberFormatInfo The number format info received from the CRM infrastructure.
         * @params crmNumberType The CRM number type for which the formatting info should be prepared.
         * @params isPercent A flag indicating whether the number is a percent.
         * @params overriddenPrecision Optional parameter that overrides the precision in the number formatting info structure.
         */
        static getNumberFormatString(numberFormatInfo: Mscrm.NumberFormattingInfo, crmNumberType: string, isPercent: boolean, overriddenPrecision?: number): string;
        private static validateSymbolLength(value, maxLength);
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    class ArrayQuery {
        private data;
        constructor(data: any[]);
        select(selector: (item: any, index?: any) => any): ArrayQuery;
        transform(selector: (item: any, index: any) => {
            key: any;
            value: any;
        }): ArrayQuery;
        each(delegate: (item: any, index?: any) => void): ArrayQuery;
        where(selector: (item: any) => any): ArrayQuery;
        firstOrDefault(selector: (item: any) => any): any;
        contains(selector: (item: any) => any): boolean;
        items(): any[];
    }
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module MscrmCommon {
    /**
     * OOB control interface
     */
    interface OOBControl<TParams> {
        context: Mscrm.ControlData<TParams>;
    }
    /**
        *Declear all valid modes
    */
    class DisplayMode {
        static UNKNOWN: string;
        static READ: string;
        static EDIT: string;
        static EDITHINT: string;
    }
    /**
     * Declear all mode switch eventNames
     */
    class ModeSwitchEventName {
        static fromReadToEdit: string;
    }
    /**
     * Display Mode Manager
     */
    class DisplayModeManager<TParams> {
        private instance;
        private currentMode;
        constructor(ins: OOBControl<TParams>);
        getMode(): string;
        setMode(newMode: string, params: Mscrm.Dictionary): void;
    }
}
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/**
 * An object that encapsulates a Guid value
 */
declare class Guid implements Mscrm.Guid {
    /**
     * Regular expression for validating a guid string consisting of groups of 8, 4, 4, 4, and 12
     * hexadecimal digits with hyphens between the groups and enclosed by optional braces
     * Examples: {12345678-1234-1234-1234-123456789abc}, 12345678-1234-1234-1234-123456789abc
     */
    private static braceAndHyphenGuidVerifierPattern;
    /**
     * Regular expression for validating a guid string consisting of 32 contiguous hex digits, capturing them in groups of 8, 4, 4, 4, and 12
     * Example: 12345678123412341234123456789abc
     */
    private static contiguousGuidVerifierPattern;
    /**
     * The internal representation of the Guid as a string.  Read-only. This is public to allow for access to the string as well as to simplify serialization.
     * TODO: Mark as read-only when we adopt TypeScript 2.0
     */
    _guid: string;
    guid: string;
    /**
     * The empty guid
     */
    static EMPTY: Guid;
    /**
     * Creates a new Guid instance.
     * @param value The string value to create as a Guid
     */
    constructor(value: string);
    /**
     * Output a properly formatted string value for the Guid
     * @param guid The guid
     * @returns The string representation of the Guid
     */
    static toString(guid: Mscrm.Guid): string;
    /**
     * Output a properly formatted string value for this Guid instance
     * Added because toString is called in EntityReference.fromLegacyEntityReference -> Guid.fromLegacyGuid in UCI
     * Otherwise, toString will return [object Object]
     * @returns The string representation of this Guid
     */
    toString(): string;
    /**
     * Determine if two guids are the same
     * @param x A guid
     * @param y A guid
     * @returns Whether the two guids are equal
     */
    static equals(x: Mscrm.Guid, y: Mscrm.Guid): boolean;
    /**
     * Attempt to create a Guid from a string that may or may not represent a Guid
     * @param value The string with a Guid value
     * @returns A valid Guid, or the empty Guid
     */
    static tryParse(value: string): Guid;
    /**
     * Attempt to create a Guid from a string that may or may not represent a Guid
     * @param value The string with a Guid value
     * @returns A valid Guid, or null
     */
    static tryParseOrNull(value: string): Guid;
    /**
     * Format the guid string in the default Guid string format
     * @param value The string with a Guid value
     * @returns The formatted Guid string
     */
    private static _formatGuidString(value);
}
/**
* @license Copyright (c) Microsoft Corporation. All rights reserved.
*/
declare module Mscrm {
    interface IDisposable {
        dispose: () => void;
    }
}
